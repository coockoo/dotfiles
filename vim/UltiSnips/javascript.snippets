snippet mirror "Mirror key-value declaration" b
$1: $1,
endsnippet

snippet reactclass "Simple class definition" b
import React, { Component } from 'react';
import PT from 'prop-types';

class $1 extends Component {
	constructor (props) {
		super(props);
	}
	render () {
		return (
			<div>
			</div>
		);
	}
}
$1.propTypes = {
};
$1.defaultProps = {
};

export default $1;
endsnippet

snippet reactpure "Simple class pure render function definition" b
import React from 'react';

export default function $1 () {
	return (
		$2
	);
}
endsnippet

snippet reactcomp "Simple react component" b
import React from 'react';
import cn from 'classnames';

import s from './styles.less';

export default function $1 (props) {
	return (
		$2
	);
}
endsnippet

snippet func "Javascript function" b
function $1 () {
	$2
}
endsnippet

snippet req "Require" b
const $1 = require('$2');
endsnippet

snippet rnclass "React native class" b
import React, { PureComponent } from 'react';
import {
	StyleSheet,
	Text,
	View,
} from 'react-native';

class $1 extends PureComponent {
	state = {
	}

	render () {
		return (
			<View>
				$2
			</View>
		);
	}
}

const styles = StyleSheet.create({
});

export default $1;
endsnippet

snippet rnpure "React native class" b
import React from 'react';
import {
	StyleSheet,
	Text,
	View,
} from 'react-native';

function $1 (props) {
	return (
		<View>
			$2
		</View>
	);
}

const styles = StyleSheet.create({
});

export default $1;
endsnippet

snippet constructor "React constructor" b
constructor (props) {
	super(props);
	this.state = {
		$1
	};
}
endsnippet

snippet cdm "componentDidMount" b
componentDidMount () {
	$1
}
endsnippet

snippet imp "Import statement" b
import $1 from '$2';
endsnippet

snippet imppar "Import statement with parentheses" b
import { $1 } from '$2';
endsnippet

snippet impall "Import * statement" b
import * as $1 from '$2';
endsnippet

snippet cl "Console log" b
console.log($1);
endsnippet

snippet reactpage "React page" b
import React, { useReducer } from 'react';

import s from './styles.less';

import { reducer, initialState, at } from './reducer';

export default function $1 (props) {
	const [state, dispatch] = useReducer(reducer, initialState)
	return (
		$2
	);
}
endsnippet

snippet reducer "Reducer implementation for page/component" b
export const at = {
	$1: '$1',
};

export const initialState = {
	$2,
};

export function reducer(state, action) {
	if (action.type === at.$1) {
		return {
			...state,
			$3,
		};
	}
	throw new Error(\`cannot handle action of type ${action.type}\`);
}
endsnippet

snippet sequelizetrx "Basic sequelize transaction" b
module.exports = {
	up: (queryInterface, Sequelize) => {
		return queryInterface.sequelize.transaction(async transaction => {
			// TODO:
		})
	},
	down: (queryInterface, Sequelize) => {
		return queryInterface.sequelize.transaction(async transaction => {
			// TODO:
		})
	},
};
endsnippet

